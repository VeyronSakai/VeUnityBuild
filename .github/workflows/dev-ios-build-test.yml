name: DevIOSBuildTest
on:
  pull_request:
  workflow_dispatch:
    inputs:
      clean:
        type: boolean
        default: false
        description: "clean"

env:
  CLEAN: ${{ github.event.inputs.clean || false }}
  OUTPUT_DIR: "iOSOutput"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: [self-hosted, macOS]
    env:
      CLEAN: ${{ github.event.inputs.clean || false }}
    steps:
      - name: Switch workspace
        uses: DeNA/setup-job-workspace-action@v2
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
          lfs: true
          clean: "${{ env.CLEAN }}"
      - name: Get Unity version
        run: |
          echo "UNITY_VERSION=$(grep "m_EditorVersion:" < ProjectSettings/ProjectVersion.txt | cut -d" " -f2)" >> "${GITHUB_ENV}"
      - name: Unity Build
        run: |
          /Applications/Unity/Hub/Editor/"${UNITY_VERSION}"/Unity.app/Contents/MacOS/Unity \
            -quit \
            -batchmode \
            -nographics \
            -projectPath "$(pwd)" \
            -executeMethod VeUnityBuild.Editor.Presentations.BatchEntryPoint.Build \
            -buildTarget iOS \
            -buildMode debug \
            -buildConfig Assets/Sample/VeUnityBuildConfig/iOSBuildConfig.asset
      - name: Get product name
        run: |
          echo "PRODUCT_NAME=$(grep 'productName:' ProjectSettings/ProjectSettings.asset | awk '{print $2}')" >> "${GITHUB_ENV}"
      - name: Copy VeDevtool content to BUILD_RESULT folder
        run: |
          cp -r VeDevtool/* "${OUTPUT_DIR}/${PRODUCT_NAME}/"
      - name: Setup ruby
        env:
          RUBY_VERSION: "2.7.8"
        run: |
          if [ ! -e "${RUNNER_TOOL_CACHE}/Ruby/${RUBY_VERSION}/arm64.complete" ]; then
            ruby-build "${RUBY_VERSION}" "${RUNNER_TOOL_CACHE}/Ruby/${RUBY_VERSION}/arm64"
            touch "${RUNNER_TOOL_CACHE}/Ruby/${RUBY_VERSION}/arm64.complete"
          fi

          echo "PATH=${RUNNER_TOOL_CACHE}/Ruby/${RUBY_VERSION}/arm64/bin:${PATH}" >> "${GITHUB_ENV}"
      - name: Xcode build
        env:
          KEYCHAIN_PASS: ${{ secrets.RUNNER_KEYCHAIN_PASS }}
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          MATCH_PASSWORD: ${{ secrets.GH_PASS }}
          LANG: "en_US.UTF-8"
          LANGUAGE: "en_US.UTF-8"
          LC_ALL: "en_US.UTF-8"
        run: |
          security unlock-keychain -p "${KEYCHAIN_PASS}" ~/Library/Keychains/login.keychain-db
          bundle config set --local path 'vendor/bundle'
          bundle install
          bundle exec fastlane ios dev_build
        working-directory: "${{ env.OUTPUT_DIR }}/${{ env.PRODUCT_NAME }}"

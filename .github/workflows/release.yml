name: Release
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - Assets/VeUnityBuild/package.json
    types:
      - closed
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PACKAGE_JSON: "Assets/VeUnityBuild/package.json"
  GITHUB_BOT_NAME: github-actions[bot]
  GITHUB_BOT_EMAIL: github-actions[bot]@users.noreply.github.com

concurrency:
  group: ${{ github.workflow }}

jobs:
  update_release_draft:
    name: update release draft
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      tag_name: ${{ steps.release_drafter.outputs.tag_name }}
    steps:
      - uses: release-drafter/release-drafter@v5
        id: release_drafter
        with:
          commitish: main

  update_package_json:
    name: update package json
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: update_release_draft
    permissions:
      contents: write
      pull-requests: write
    env:
      VERSION: ${{ needs.update_release_draft.outputs.tag_name }}
      SOURCE_BRANCH: github-actions/update-package-json/${{ github.run_number }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Update package.json
        shell: pwsh
        run: |
          $jsonContent = Get-Content -Path $env:PACKAGE_JSON | ConvertFrom-Json
          $jsonContent.version = $env:VERSION
          $jsonContent | ConvertTo-Json | Set-Content -Path $env:PACKAGE_JSON
      - name: Commit package.json
        uses: EndBug/add-and-commit@v9
        id: commit-package-json
        with:
          author_name: ${{ env.GITHUB_BOT_NAME }}
          author_email: ${{ env.GITHUB_BOT_EMAIL }}
          message: "Update package.json"
          add: ${{ env.PACKAGE_JSON }}
          new_branch: ${{ env.SOURCE_BRANCH }}
      - name: Create pull request and merge
        run: |
          gh pr create --title "Update package.json" --body "update package.json" --base main --head "${SOURCE_BRANCH}"
          gh pr merge "${SOURCE_BRANCH}" --auto --merge

  release:
    name: release
    environment: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'pull_request' && github.event.pull_request.merged && github.event.pull_request.base.ref == 'main'
    needs: update_release_draft
    env:
      VERSION: ${{ needs.update_release_draft.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      - name: Confirm version in package.json
        run: |
          package_version=$(jq -r '.version' "${PACKAGE_JSON}")

          if [[ "${package_version}" != "${VERSION}" ]]; then
            echo "::error::version in package.json (${package_version}) does not match the release draft tag (${VERSION})"
            exit 1
          fi
      - uses: release-drafter/release-drafter@v5
        id: release-drafter
        with:
          publish: true
          commitish: main
      - name: Get semver
        id: get-semver
        run: |
          echo "major=$(echo "${VERSION}" | grep -oE '^\d+')" >> "${GITHUB_OUTPUT}"
          echo "minor=$(echo "${VERSION}" | grep -oE '^\d+\.\d+')" >> "${GITHUB_OUTPUT}"
          echo "patch=$(echo "${VERSION}" | grep -oE '^\d+\.\d+\.\d+')" >> "${GITHUB_OUTPUT}"

          echo $major
          echo $minor
          echo $patch
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.VERSION }}
      - name: Update major tag
        if: steps.get-semver.outputs.major != '0'
        run: |
          git push -f origin "refs/tags/${VERSION}:refs/tags/${{ steps.get-semver.outputs.major }}"
      - name: Update minor tag
        if: steps.get-semver.outputs.minor != '0.0'
        run: |
          git push -f origin "refs/tags/${VERSION}:refs/tags/${{ steps.get-semver.outputs.minor }}"

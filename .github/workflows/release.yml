name: Release
on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PACKAGE_JSON: "Assets/VeUnityBuild/package.json"

concurrency:
  group: ${{ github.workflow }}

jobs:
  update_release_draft:
    name: update release draft
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.release_drafter.outputs.tag_name }}
    steps:
      - uses: release-drafter/release-drafter@v5
        id: release_drafter
        with:
          commitish: main

  release:
    name: release
    environment: release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: update_release_draft
    env:
      VERSION: ${{ needs.update_release_draft.outputs.tag_name }}
    steps:
      - name: Update package.json
        shell: pwsh
        run: |
          $jsonContent = Get-Content -Path $env:PACKAGE_JSON | ConvertFrom-Json
          $jsonContent.version = $env:VERSION
          $jsonContent | ConvertTo-Json | Set-Content -Path $env:PACKAGE_JSON
      - name: Commit package.json
        shell: pwsh
        run: |
          git config user.email github-actions[bot]@users.noreply.github.com
          git config user.name github-actions[bot]
          git switch -C github-actions/update-package-json
          git add $env:PACKAGE_JSON
          git commit -m "Update package.json"
          git push -u origin (git branch --show-current)
      - name: Create Pull Request and auto merge
        shell: pwsh
        run: |
          $pr = gh pr create --title "Update package.json" --base main --head (git branch --show-current)
          gh pr merge $pr.number --auto  
      - uses: release-drafter/release-drafter@v5
        id: release-drafter
        with:
          publish: true
          commitish: main
      - name: Create semver outputs
        uses: actions/github-script@v6
        id: semver
        with:
          script: |
            const matched = "${{ env.VERSION }}".match(/(((\d+)\.\d+).\d+)/)
            core.setOutput('major', matched[3])
            core.setOutput('minor', matched[2])
            core.setOutput('patch', matched[1])
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.VERSION }}
      - name: Update major tag
        if: steps.semver.outputs.major != '0'
        run: |
          git push -f origin "refs/tags/${VERSION}:refs/tags/${{ steps.semver.outputs.major }}"
      - name: Update minor tag
        if: steps.semver.outputs.minor != '0.0'
        run: |
          git push -f origin "refs/tags/${VERSION}:refs/tags/${{ steps.semver.outputs.minor }}"
